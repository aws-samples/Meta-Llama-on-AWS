#Output directory to save model
output_dir: ./l4_lora_output

# Modeling Arguments
model:
  _component_: torchtune.models.llama4.lora_llama4_scout_17b_16e
  decoder_trainable: "lora"
  encoder_trainable: "frozen"
  fusion_trainable: "lora"
  lora_attn_modules: ['q_proj', 'v_proj', 'output_proj']
  apply_lora_to_mlp: True
  apply_lora_to_output: False
  lora_rank: 16  # higher increases accuracy and memory
  lora_alpha: 32  # usually alpha=2*rank
  lora_dropout: 0.0

tokenizer:
  _component_: torchtune.models.llama4.llama4_transform
  path: ./Llama-4-Scout-17B-16E/tokenizer.model
  max_seq_len: null
  max_num_tiles: 16

checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: ./Llama-4-Scout-17B-16E
  checkpoint_files:
    filename_format: model-{}-of-{}.safetensors
    max_filename: "00050"
  recipe_checkpoint: null
  output_dir: ${output_dir}
  model_type: LLAMA4
save_adapter_weights_only: True
resume_from_checkpoint: False

dataset:
  _component_: torchtune.datasets.instruct_dataset
  source: json
  data_files: "./dataset/train_dataset.json"
  column_map:
    input: "prompt"
    output: "response"
  train_on_input: False
  packed: False
  split: "train"
seed: null
shuffle: True

# Validation
run_val_every_n_steps: 100  # Change to an integer to enable validation every N steps
dataset_val:
  _component_: torchtune.datasets.instruct_dataset
  source: json
  data_files: "./dataset/test_dataset.json"
  column_map:
    input: "prompt"
    output: "response"
  packed: False
  #split: "train[95%:]"    
batch_size_val: ${batch_size}

# Training arguments
epochs: 1
batch_size: 2
max_steps_per_epoch: null
gradient_accumulation_steps: 1 # Use to increase effective batch size
optimizer:
  _component_: torch.optim.AdamW
  lr: 2e-5
  fused: False
optimizer_in_bwd: False
lr_scheduler:
  _component_: torchtune.training.lr_schedulers.get_cosine_schedule_with_warmup
  num_warmup_steps: 100
loss:
  _component_: torchtune.modules.loss.LinearCrossEntropyLoss
clip_grad_norm: null

# cuda, cpu, rocm, xpu...
device: cuda

# Memory management / performance
enable_activation_checkpointing: True
enable_activation_offloading: False
custom_sharded_layers: ['tok_embeddings']
fsdp_cpu_offload: False
compile: False # torch.compile, set to true for perf/memory improvement

# Reduced precision
dtype: bf16

# Log metrics during training
metric_logger:
  _component_: torchtune.training.metric_logging.DiskLogger
  log_dir: ${output_dir}/logs
log_every_n_steps: 1
log_peak_memory_stats: True
log_level: INFO  # DEBUG, WARN, etc.

# Useful for understanding how to optimize memory and performance
profiler:
  _component_: torchtune.training.setup_torch_profiler
