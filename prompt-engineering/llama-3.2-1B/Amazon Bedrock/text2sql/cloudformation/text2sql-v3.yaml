AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy resources required to run the text2sql llama3.2 notebook. 

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default

  VPCLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 7

  VPCLogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !GetAtt LogsPolicy.PolicyArn

  LogsPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Path: /
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: '*'

  VPCFlowLog:
    Type: "AWS::EC2::FlowLog"
    Properties:
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL
      LogGroupName: !Ref VPCLogGroup
      DeliverLogsPermissionArn: !GetAtt [ VPCLogRole, Arn ]
  
  SageMakerSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      MapPublicIpOnLaunch: true
    

  DBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''

  DBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''


  SageMakerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow outbound MySQL
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          DestinationSecurityGroupId: !Ref RDSSecurityGroup
      Tags:
        - Key: Name
          Value: AllowOutboundMySQL

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: 'Database instances security group'
      Tags:
        - Key: Name
          Value: RDSSecurityGroup

  RDSSecurityGroupIngressMySQL:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RDSSecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref SageMakerSecurityGroup


  RDSSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Subnets to launch db instances into
      SubnetIds: 
      - !Ref DBSubnet1
      - !Ref DBSubnet2

  DatabaseInstanceMySQL:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t3.micro
      Engine: MySQL
      PubliclyAccessible: false
      AllocatedStorage: 8
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecretMySQL, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecretMySQL, ':SecretString:password}}' ]]
      DBSubnetGroupName: !Ref RDSSubnetGroup
      StorageEncrypted: true
      VPCSecurityGroups: 
        - !Ref RDSSecurityGroup
  
  SageMakerNotebookInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: sagemaker.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
      Policies:
      - PolicyName: SecretsManagerAccessPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: 'secretsmanager:GetSecretValue'
              Resource: !Ref RDSSecretMySQL
      - PolicyName: BedrockAccessPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: 'bedrock:InvokeModel'
              Resource:
                - 'arn:aws:bedrock:*::foundation-model/meta.llama3-70b-instruct-v1:0'
                - 'arn:aws:bedrock:*::foundation-model/meta.llama3-8b-instruct-v1:0'
                - 'arn:aws:bedrock:*::foundation-model/meta.llama3-1-70b-instruct-v1:0'
                - 'arn:aws:bedrock:*::foundation-model/meta.llama3-1-8b-instruct-v1:0'
                - 'arn:aws:bedrock:*::foundation-model/amazon.titan-embed-text-v2:0'
                - 'arn:aws:bedrock:*:*:inference-profile/us.meta.llama3-2-1b-instruct-v1:0'
                - 'arn:aws:bedrock:*:*:inference-profile/us.meta.llama3-2-3b-instruct-v1:0'
                - 'arn:aws:bedrock:*:*:inference-profile/us.meta.llama3-2-11b-instruct-v1:0'
                - 'arn:aws:bedrock:*:*:inference-profile/us.meta.llama3-2-90b-instruct-v1:0'
                - 'arn:aws:bedrock:*::foundation-model/meta.llama3-2-1b-instruct-v1:0'
                - 'arn:aws:bedrock:*::foundation-model/meta.llama3-2-3b-instruct-v1:0'
                - 'arn:aws:bedrock:*::foundation-model/meta.llama3-2-11b-instruct-v1:0'
                - 'arn:aws:bedrock:*::foundation-model/meta.llama3-2-90b-instruct-v1:0'
      - PolicyName: CloudFormationReadOnlyAccessPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'cloudformation:DescribeStackResources'
                - 'cloudformation:DescribeStacks'
              Resource: !Join
                - ''
                - - 'arn:aws:cloudformation:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':stack/'
                  - !Ref 'AWS::StackName'
                  - '/*'
      

  SageMakerNotebook:
    Type: AWS::SageMaker::NotebookInstance
    Properties:
      InstanceType: ml.t3.medium
      RoleArn: !GetAtt SageMakerNotebookInstanceRole.Arn
      SubnetId: !Ref SageMakerSubnet 
      InstanceMetadataServiceConfiguration:
        MinimumInstanceMetadataServiceVersion: 2
      SecurityGroupIds:
        - !Ref SageMakerSecurityGroup
      DefaultCodeRepository: !GetAtt CodeRepository.CodeRepositoryName    

  CodeRepository:
    Type: AWS::SageMaker::CodeRepository
    Properties:
      GitConfig:
        RepositoryUrl: https://github.com/aws-samples/Meta-Llama-on-AWS.git
        Branch: main

  RDSSecretMySQL: 
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Secrets for MySQL RDS instance made from cloudformation template
      GenerateSecretString:
        SecretStringTemplate: '{"username": "user"}' 
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
 

Outputs:
  DatabaseEndpointMySQL:
    Description: The connection endpoint for the database
    Value: !GetAtt DatabaseInstanceMySQL.Endpoint.Address

  SecretArnMySQL:
    Description: The arn of the secret
    Value: !Ref RDSSecretMySQL

  SageMakerNotebookURL:
    Description: SageMaker Notebook Instance
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt SageMakerNotebook.NotebookInstanceName
        - '.notebook.'
        - !Ref AWS::Region
        - '.sagemaker.aws/lab'
